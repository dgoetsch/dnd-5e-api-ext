/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dandd.character.automation

import arrow.core.Either
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import dandd.character.automation.model.Spell
import dandd.character.automation.source.ResourceLoader
import dandd.character.automation.source.createLoaderFor
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.runBlocking
import java.io.File

typealias Result<T> =  Either<Throwable, T>


fun main(args: Array<String>) {
    val urlBase = "https://www.dnd5eapi.co"
    val objectMapper = jacksonObjectMapper()

    val spellLoader = createLoaderFor(
            urlBase,
            "spells",
            { text -> Either.Companion.catch { objectMapper.readValue(text, Spell::class.java) } },
            { spell -> Either.catch { objectMapper.writeValueAsString(spell) } }
    )

    runBlocking {
        ResourceOrigin("spells", spellLoader)
                .loadAll()
                .catch { println(it) }
                .collect { println(it) }
    }
}

data class ResourceOrigin<T>(val resourceType: String, val resourceLoader: ResourceLoader<T>) {
    suspend fun loadAll(): Flow<Result<T>> {
        val result = Either.catch {
            File("$resourceType.txt").useLines {
                it.toList().asFlow()
                        .flatMapConcat { resourceName ->
                            flow {
                                emit(resourceLoader.loadResource(resourceName))
                            }
                        }
            }
        }

        return when(result) {
            is Either.Left<Throwable> -> flowOf(result)
            is Either.Right<Flow<Result<T>>> -> result.b
        }
    }
}








